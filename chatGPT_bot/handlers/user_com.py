import db
import logging
import asyncio
import g4f
import db
from language import *
from aiogram.filters.command import Command
from aiogram import F, Router, F, types
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

database = db.Database()
router = Router()
selected_language = ru_strings
ADMIN_USER_ID = 

async def generate_response(user_message):
    try:
        response = await asyncio.to_thread(g4f.ChatCompletion.create, model='gpt-4-0613',
                                           messages=[{"role": "system", "content": "You are a ChatGPT4, openAi not Bing"},
                                                     {"role": "user", "content": user_message}])
        return response
    except Exception as e:
        return str(e)

@router.message(Command("start"))
async def on_start(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text="–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã! üí∞"),
            types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å üßë‚Äçüíº")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏"
    )



    user_id = message.from_user.id
    username = message.from_user.username
    registration_date = message.date.strftime("%Y-%m-%d")
    remaining_tokens = 20

    database.insert_user(user_id, username, registration_date, remaining_tokens)

    await message.answer("–ü—Ä–∏–≤–µ—Ç!", reply_markup=keyboard)

from aiogram import types

@router.message(F.text.startswith("–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã!"))
async def without_puree(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="20 —Ä—É–±–ª–µ–π - 20 —Ç–æ–∫–µ–Ω–æ–≤ üí∞",
        callback_data="20tokens")
    )
    builder.add(types.InlineKeyboardButton(
        text="30 —Ä—É–±–ª–µ–π - 30 —Ç–æ–∫–µ–Ω–æ–≤ üí∞",
        callback_data="30tokens")
    )
    builder.add(types.InlineKeyboardButton(
        text="40 —Ä—É–±–ª–µ–π - 40 —Ç–æ–∫–µ–Ω–æ–≤ üí∞",
        callback_data="40tokens")
    )
    builder.add(types.InlineKeyboardButton(
        text="70 —Ä—É–±–ª–µ–π - 70 —Ç–æ–∫–µ–Ω–æ–≤ üí∞",
        callback_data="70tokens")
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ (1 —Ç–æ–∫–µ–Ω = –∑–∞–ø—Ä–æ—Å = 1 —Ä—É–±–ª—å):",
        reply_markup=builder.as_markup()
    )

@router.message(F.text.startswith("–ü—Ä–æ—Ñ–∏–ª—å"))
async def show_profile(message: types.Message):
    user_id = message.from_user.id
    user = database.get_user(user_id)
    
    if user:
        user_id = user[0]
        username = user[2]
        remaining_tokens = user[4]
        
        emoji_wallet = "üí∞"  # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
        profile_text = (
            f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {message.from_user.id}):\n"
            f"–û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã: {remaining_tokens} {emoji_wallet}"
        )

        # –î–æ–±–∞–≤–∏–º —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–≤–∞—à –∫–æ–¥)

        await message.answer(profile_text)
    else:
        await message.answer(selected_language['not_registered'])

    
@router.callback_query(F.data == "20tokens")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã–±—Ä–∞–Ω–æ 20 —Ç–æ–∫–µ–Ω–æ–≤! üí∞")

    thank_you_message = (
            f"üåü –°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ 20 —Ç–æ–∫–µ–Ω–æ–≤! üåü\n"
            f"–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ @CodeWarpX."
    )

    await callback.message.answer(thank_you_message)

@router.callback_query(F.data == "30tokens")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã–±—Ä–∞–Ω–æ 30 —Ç–æ–∫–µ–Ω–æ–≤! üí∞")

    thank_you_message = (
            f"üåü –°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ 30 —Ç–æ–∫–µ–Ω–æ–≤! üåü\n"
            f"–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ @CodeWarpX."
    )

    await callback.message.answer(thank_you_message)


@router.callback_query(F.data == "40tokens")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã–±—Ä–∞–Ω–æ 40 —Ç–æ–∫–µ–Ω–æ–≤! üí∞")

    thank_you_message = (
            f"üåü –°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ 40 —Ç–æ–∫–µ–Ω–æ–≤! üåü\n"
            f"–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ @CodeWarpX."
    )

    await callback.message.answer(thank_you_message)


@router.callback_query(F.data == "70tokens")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã–±—Ä–∞–Ω–æ 70 —Ç–æ–∫–µ–Ω–æ–≤! üí∞")

    thank_you_message = (
            f"üåü –°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ 70 —Ç–æ–∫–µ–Ω–æ–≤! üåü\n"
            f"–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ @CodeWarpX."
    )

    await callback.message.answer(thank_you_message)

@router.message(F.text.startswith('/ban_user'))
async def ban_user(message: types.Message):
    if message.from_user.id == ADMIN_USER_ID:
        command_parts = message.text.split(maxsplit=1)
        
        if len(command_parts) > 1:
            user_id_to_ban = command_parts[1]
            
            try:
                user_id_to_ban = int(user_id_to_ban)
                user = database.get_user(user_id_to_ban)

                if user:
                    database.ban_user(user_id_to_ban)
                    ban_success_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[2]} —Å ID {user_id_to_ban} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                    logging.info(ban_success_message)
                    await message.answer(ban_success_message)
                else:
                    user_not_found_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    await message.answer(user_not_found_message)
            except ValueError:
                invalid_user_id_message = "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                await message.answer(invalid_user_id_message)
        else:
            missing_user_id_message = "–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            await message.answer(missing_user_id_message)
    else:
        unban_user_permission_denied_message = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        await message.answer(unban_user_permission_denied_message)

@router.message(F.text.startswith('/add_tokens'))
async def add_tokens(message: types.Message):
    if message.from_user.id == ADMIN_USER_ID:
        command_parts = message.text.split(maxsplit=2)
        if len(command_parts) == 3:
            try:
                user_id_to_add_tokens, tokens_to_add = map(int, command_parts[1:])
                user = database.get_user(user_id_to_add_tokens)
                if user:
                    remaining_tokens = user[4]
                    remaining_tokens += tokens_to_add
                    database.update_tokens(user_id_to_add_tokens, remaining_tokens)
                    add_tokens_success_message = f"–î–æ–±–∞–≤–ª–µ–Ω–æ {tokens_to_add} —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[2]} (ID: {user_id_to_add_tokens})."
                    await message.answer(add_tokens_success_message)
                else:
                    user_not_found_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    await message.answer(user_not_found_message)
            except ValueError:
                invalid_command_format_message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_tokens [user_id] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤]."
                await message.answer(invalid_command_format_message)
        else:
            invalid_command_format_message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_tokens [user_id] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤]."
            await message.answer(invalid_command_format_message)
    else:
        add_tokens_permission_denied_message = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤."
        await message.answer(add_tokens_permission_denied_message)



from aiogram import types

@router.message(F.text.startswith('/unban_user'))
async def unban_user(message: types.Message):
    if message.from_user.id == ADMIN_USER_ID:
        command_parts = message.text.split(maxsplit=1)

        if len(command_parts) == 2:
            command, user_id_to_unban = command_parts
            try:
                user_id_to_unban = int(user_id_to_unban)
                user = database.get_user(user_id_to_unban)
                if user:
                    database.unban_user(user_id_to_unban)
                    user_unban_success_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[2]} —Å ID {user_id_to_unban} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                    logging.info(user_unban_success_message)
                    await message.answer(user_unban_success_message)
                else:
                    user_not_found_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    await message.answer(user_not_found_message)
            except ValueError:
                invalid_user_id_message = "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                await message.answer(invalid_user_id_message)
        else:
            invalid_command_format_message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unban_user [user_id]."
            await message.answer(invalid_command_format_message)
    else:
        unban_user_permission_denied_message = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        await message.answer(unban_user_permission_denied_message)


@router.message(lambda message: message.text and not message.text.startswith('/start') and not message.text.startswith('/ban_user')
                and not message.text.startswith('/unban_user') and not message.text.startswith('/add_tokens') and not message.text.startswith('–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã!') 
                and not message.text.startswith('–ü—Ä–æ—Ñ–∏–ª—å'))
# @rate_limit(RATE_LIMIT_MESSAGES, RATE_LIMIT_PERIOD)
async def on_text(message: types.Message):
    user_message = message.text
    user_id = message.from_user.id
    user = database.get_user(user_id)

    if user:
        if user[5]:  # Check if the user is banned
            await message.answer("You are banned and cannot send messages. üö´")
        else:
            # Check if the user has enough tokens
            if database.deduct_token(user_id=user_id):
                try:
                    await message.answer("Processing... Please wait... ‚åõ")
                    response = await generate_response(user_message)
                    await message.answer(response, parse_mode="MARKDOWN")
                except Exception as e:
                    error_message = f"An error occurred: {str(e)}"
                    logging.error(f"An error occurred: {str(e)}")
                    await message.answer(error_message)
            else:
                await message.answer("Not enough tokens. You can buy more using the 'Buy Tokens üí∞' command.")
    else:
        await message.answer("You are not registered. Please use /start to register. üìù")


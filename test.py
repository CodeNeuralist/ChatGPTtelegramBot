import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
import secmail


class UserDatabase:
    def __init__(self, db_name='user_database.db'):
        self.db_name = db_name
        self.conn = sqlite3.connect(db_name)
        self.create_table()

    def create_table(self):
        with self.conn:
            cursor = self.conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    chat_id INTEGER NOT NULL,
                    email TEXT NOT NULL
                )
            ''')

    def add_user(self, chat_id, email):
        with self.conn:
            cursor = self.conn.cursor()
            cursor.execute('INSERT INTO users (chat_id, email) VALUES (?, ?)', (chat_id, str(email)))

    def get_user_email(self, chat_id):
        with self.conn:
            cursor = self.conn.cursor()
            cursor.execute('SELECT email FROM users WHERE chat_id=?', (chat_id,))
            result = cursor.fetchone()
            return result[0] if result else None
    def update_user_email(self, chat_id, new_email):
        with self.conn:
            cursor = self.conn.cursor()
            cursor.execute('UPDATE users SET email=? WHERE chat_id=?', (str(new_email), chat_id))
    def get_user_by_id(self, id):
        with self.conn:
            cursor = self.conn.cursor()
            cursor.execute('SELECT * FROM users WHERE chat_id=?', (id,))
            result = cursor.fetchone()
            return result[0] if result else None
        
    def remove_user(self, id):
        with self.conn:
            cursor = self.conn.cursor()
            cursor.execute('DELETE FROM users WHERE chat_id=?', (id,))
            

    def close(self):
        self.conn.close()


API_TOKEN = '6687469087:AAGbjmlFZvlpQOU7gDUWdIOLe-ltQ-RUQec'  # –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
user_db = UserDatabase()

admin_id = 6918756613


async def is_admin(user_id):
    # Replace this with your logic to check if the user is an administrator
    # For example, you can compare the user_id with a list of admin user IDs
    admins = [6918756613]  # Replace with your admin user IDs
    return user_id in admins


from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# ... (your existing code)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    chat_id = message.from_user.id
    print(chat_id)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    buy_access_button = KeyboardButton('üí∞–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–øüí∞')
    markup.add(buy_access_button)
    # Check if the user is in the database
    if user_db.get_user_by_id(chat_id) is None:
        

        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç {message.from_user.username}! –≠—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Ç—å! "
            f"–≠—Ç–æ—Ç –±–æ—Ç –¥–∞–µ—Ç –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—á—Ç—É –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ! "
            f"–ü–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ. "
            f"–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_email. "
            f"–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @DevElantru",
            reply_markup=markup
        )
    else:
        await message.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∫—É–ø–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É! =)", reply_markup = markup)

# ... (your existing code)
@dp.message_handler(lambda message: message.text == 'üí∞–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–øüí∞')
async def buy_access(message: types.Message):
    print(user_db.get_user_by_id(message.from_user.id))
    if user_db.get_user_by_id(message.from_user.id) is None:
        chat_id = message.from_user.id
        username = message.from_user.username
        user_info = f"User ID: {chat_id}\nUsername: {username}"

        await bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({chat_id}) —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø.\n\n{user_info}")
        await message.answer(f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É: @DevElantru")
    else:       
        await message.answer(f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∫—É–ø–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É! =)")


@dp.message_handler(commands=['get_email'])
async def get_email(message: types.Message):
    chat_id = message.from_user.id
    print(user_db.get_user_by_id(chat_id))

    # Check if the user is in the database
    if user_db.get_user_by_id(chat_id) is None:
        await message.answer("‚ùå –í—ã –Ω–µ –∫—É–ø–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É! @Elantru ‚ùå")
        return
    else:
        await message.answer("–°–ø–∞—Å–∏–±–æ —á—Ç–æ –∫—É–ø–∏–ª –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É=)")

    email = client.random_email(amount=1)[0]
    user_db.update_user_email(chat_id, email)
    await message.answer(f"‚úâÔ∏è–í–∞—à–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Ç—á–∞: {email}                   —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —è—â–∏–∫ —ç—Ç–æ–π –ø–æ—á—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /check")


@dp.message_handler(commands=['add_user'])
async def add_user(message: types.Message):
    chat_id = message.from_user.id

    # Check if the user is an administrator
    if not await is_admin(chat_id):
        await message.answer("‚ùóÔ∏è–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä‚ùóÔ∏è")
        return

    # Extract user_id from the message text
    try:
        user_id = int(message.text.split()[1])
        user_db.add_user(user_id, "")
        await message.answer(f"–ü–æ–ª—å–∑–∞–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω")
    except (IndexError, ValueError):
        await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
@dp.message_handler(commands=['remove_user'])
async def remove_user(message: types.Message):
    chat_id = message.from_user.id

    # Check if the user is an administrator
    if not await is_admin(chat_id):
        await message.answer("‚ùóÔ∏è–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä‚ùóÔ∏è")
        return

    # Extract user_id from the message text
    user_id = int(message.text.split()[1])
    user_db.remove_user(user_id)
    await message.answer(f"–ü–æ–ª—å–∑–∞–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω.")


@dp.message_handler(commands=['check'])
async def get_email(message: types.Message):
    chat_id = message.chat.id
    email = user_db.get_user_email(chat_id)
    print(email)

    inbox = client.get_inbox(str(email))
    formatted_messages = ""

    if not inbox:
        # –ï—Å–ª–∏ –≤ –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        await bot.send_message(chat_id, "–í –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
    else:
        for msg in inbox:
            formatted_messages += f"–ê–π–¥–∏: {msg.id}\n"
            formatted_messages += f"–û—Ç: {msg.from_address}\n"
            message = client.get_message(address=email, message_id=msg.id)
            msgBody = message.body
            msgBody = msgBody[15:-7]
            formatted_messages += f"–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {msgBody}\n"
            formatted_messages += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {msg.subject}\n"
            formatted_messages += f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ú–°–ö): {msg.date}\n\n"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç–∞
        await bot.send_message(chat_id, formatted_messages)


if __name__ == '__main__':
    client = secmail.Client()
    from aiogram import executor

    try:
        executor.start_polling(dp, skip_updates=True)
    finally:
        user_db.close()
